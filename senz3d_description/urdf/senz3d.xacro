<?xml version="1.0"?>

<robot name="senz3d_sensor" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <xacro:macro name="sensor_senz3d" params="prefix name parent cam_px cam_py cam_pz cam_or cam_op cam_oy">
        <!-- Senz3d sensor URDF part, cf. https://github.com/turtlebot/turtlebot
        and there turtlebot_description/urdf/sensors/kinect.xacro -->
        <joint name="${name}_rgb_joint" type="fixed">
            <parent link="${parent}"/>
            <child link="${name}_rgb_frame"/>
            <origin xyz="${cam_px} ${cam_py} ${cam_pz}"
                    rpy="${cam_or} ${cam_op} ${cam_oy}"/>
        </joint>

        <link name="${name}_rgb_frame"/>

        <joint name="${name}_rgb_optical_joint" type="fixed">
            <parent link="${name}_rgb_frame"/>
            <child link="${name}_rgb_optical_frame"/>
            <origin xyz="0 0 0" rpy="-1.57 0 -1.57"/>
        </joint>

        <link name="${name}_rgb_optical_frame"/>

        <joint name="${name}_joint" type="fixed">
            <parent link="${name}_rgb_frame"/>
            <child link="${name}_link"/>
            <origin xyz="0 -0.0125 -0.016" rpy="0 0 0"/>
        </joint>

        <link name="${name}_link">
            <visual>
                <geometry>
                    <!-- As we don't have a Senz3D mesh, use a deformed Asus Xtion Pro instead -->
                    <mesh filename="package://senz3d_description/meshes/sensors/asus_xtion_pro_live.dae"
                          scale="0.0006 0.0015 0.001"/>
                </geometry>
                <origin xyz="0 0 0" rpy="1.57 0.0 1.57"/>
            </visual>

            <collision>
                <geometry>
                    <box size="0.108458 0.051562 0.053594"/>
                </geometry>
                <contact_coefficients mu="0" kp="1000.0" kd="1.0"/>
            </collision>

            <inertial>
                <mass value="0.2710214"/>
                <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                         iyy="0.001" iyz="0.0"
                         izz="0.001"/>
            </inertial>
        </link>

        <joint name="${name}_depth_joint" type="fixed">
            <parent link="${name}_rgb_frame"/>
            <child link="${name}_depth_frame"/>
            <origin xyz="0 -0.025 0" rpy="0 0 0"/>
        </joint>

        <link name="${name}_depth_frame"/>

        <joint name="${name}_depth_optical_joint" type="fixed">
            <parent link="${name}_depth_frame"/>
            <child link="${name}_depth_optical_frame"/>
            <origin xyz="0 0 0" rpy="-1.57 0 -1.57"/>
        </joint>

        <link name="${name}_depth_optical_frame"/>


        <!-- Not sure why in a macro arguments cannot be passed to an
        associated .gazebo.xacro file... -->
        <!-- See https://github.com/turtlebot/turtlebot and there
        turtlebot_description/urdf/turtlebot_gazebo.urdf.xacro -->
        <!-- See http://support.creative.com/kb/ShowArticle.aspx?sid=120808
        for the camera's technical specifications -->
        <gazebo reference="${name}_link">
            <sensor name="${name}_sensor" type="depth">
                <always_on>true</always_on>
                <update_rate>30.0</update_rate>
                <camera>
                    <horizontal_fov>${74.0*3.14/180.0}</horizontal_fov>
                    <image>
                        <width>320</width>
                        <height>240</height>
                        <format>L8</format>
                    </image>
                    <clip>
                        <near>0.1</near>
                        <far>8.0</far>
                    </clip>
                    <noise>
                        <!-- Noise is sampled independently per pixel on each frame.
                        That pixel's noise value is added to each of its color
                        channels, which at that point lie in the range [0,1]. -->
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.001</stddev>
                    </noise>
                </camera>
                <plugin name="${name}_sensor_controller"
                        filename="libgazebo_ros_openni_kinect.so">
                    <cameraName>${name}</cameraName>
                    <alwaysOn>true</alwaysOn>
                    <updateRate>30.0</updateRate>
                    <imageTopicName>ir/image</imageTopicName>
                    <depthImageTopicName>depth/image</depthImageTopicName>
                    <pointCloudTopicName>depth/points</pointCloudTopicName>
                    <cameraInfoTopicName>ir/camera_info</cameraInfoTopicName>
                    <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
                    <frameName>${name}_depth_optical_frame</frameName>
                    <pointCloudCutoff>0.5</pointCloudCutoff>
                    <pointCloudCutoffMax>4.5</pointCloudCutoffMax>
                    <baseline>0.1</baseline>
                    <distortionK1>0.0</distortionK1>
                    <distortionK2>0.0</distortionK2>
                    <distortionK3>0.0</distortionK3>
                    <distortionT1>0.0</distortionT1>
                    <distortionT2>0.0</distortionT2>
                    <robotNamespace>${prefix}</robotNamespace>
                </plugin>
            </sensor>
        </gazebo>
        <gazebo reference="${name}_link">
            <sensor name="${name}_camera" type="camera">
                <always_on>true</always_on>
                <update_rate>30.0</update_rate>
                <camera name="${name}_camera">
                    <horizontal_fov>${74.0*3.14/180.0}</horizontal_fov>
                    <image>
                        <width>1280</width>
                        <height>720</height>
                        <format>R8G8B8</format>
                    </image>
                    <clip>
                        <near>0.02</near>
                        <far>10.0</far>
                    </clip>
                    <noise>
                        <!-- Noise is sampled independently per pixel on each frame.
                        That pixel's noise value is added to each of its color
                        channels, which at that point lie in the range [0,1]. -->
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.007</stddev>
                    </noise>
                </camera>
                <plugin name="${name}_camera_controller"
                        filename="libgazebo_ros_camera.so">
                    <alwaysOn>true</alwaysOn>
                    <update_rate>30.0</update_rate>
                    <cameraName>${name}</cameraName>
                    <imageTopicName>rgb/image</imageTopicName>
                    <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
                    <frameName>${name}_rgb_optical_frame</frameName>
                    <baseline>0.1</baseline>
                    <distortionK1>0.0</distortionK1>
                    <distortionK2>0.0</distortionK2>
                    <distortionK3>0.0</distortionK3>
                    <distortionT1>0.0</distortionT1>
                    <distortionT2>0.0</distortionT2>
                    <robotNamespace>${prefix}</robotNamespace>
                </plugin>
            </sensor>
        </gazebo>
    </xacro:macro>
</robot>
